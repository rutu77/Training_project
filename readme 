import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CourseService } from '../course.service';

@Component({
  selector: 'app-update-course',
  templateUrl: './update-course.component.html',
  styleUrls: ['./update-course.component.scss']
})
export class UpdateCourseComponent implements OnInit {
  updateCourseForm!: FormGroup;
  courseId!: number;
  isLoading = true;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private courseService: CourseService
  ) {}

  ngOnInit(): void {
    this.courseId = Number(this.route.snapshot.paramMap.get('id'));
    this.initForm();
    this.loadCourseData();
  }

  initForm() {
    this.updateCourseForm = this.fb.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      price: ['', [Validators.required, Validators.min(0)]],
      thumbnail: [''],
      level: ['', Validators.required],
      tags: ['']
    });
  }

  loadCourseData() {
    this.courseService.getCourseById(this.courseId).subscribe(course => {
      if (course) {
        this.updateCourseForm.patchValue({
          title: course.title,
          description: course.description,
          price: course.price,
          thumbnail: course.thumbnail,
          level: course.level,
          tags: course.tags.join(', ') // Convert array to comma-separated string
        });
      }
      this.isLoading = false;
    });
  }

  onSubmit() {
    if (this.updateCourseForm.invalid) return;

    const updatedCourse = {
      ...this.updateCourseForm.value,
      tags: this.updateCourseForm.value.tags.split(',').map((tag: string) => tag.trim()) // Convert back to array
    };

    this.courseService.updateCourse(this.courseId, updatedCourse).subscribe(() => {
      this.router.navigate(['/courses']);
    });
  }
}



<div class="update-course-container" *ngIf="!isLoading">
  <h2>Update Course</h2>

  <form [formGroup]="updateCourseForm" (ngSubmit)="onSubmit()">
    <label for="title">Title:</label>
    <input id="title" formControlName="title" type="text" required>

    <label for="description">Description:</label>
    <textarea id="description" formControlName="description"></textarea>

    <label for="price">Price:</label>
    <input id="price" formControlName="price" type="number" required>

    <label for="thumbnail">Thumbnail URL:</label>
    <input id="thumbnail" formControlName="thumbnail" type="text">

    <label for="level">Level:</label>
    <select id="level" formControlName="level">
      <option value="beginner">Beginner</option>
      <option value="intermediate">Intermediate</option>
      <option value="advanced">Advanced</option>
    </select>

    <label for="tags">Tags (comma separated):</label>
    <input id="tags" formControlName="tags" type="text">

    <button type="submit" [disabled]="updateCourseForm.invalid">Update Course</button>
  </form>
</div>

<div *ngIf="isLoading">
  <p>Loading course data...</p>
</div>



import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CourseService {
  private baseUrl = 'http://localhost:3000/api/courses'; // Adjust based on backend

  constructor(private http: HttpClient) {}

  getCourseById(id: number): Observable<any> {
    return this.http.get(`${this.baseUrl}/${id}`);
  }

  updateCourse(id: number, courseData: any): Observable<any> {
    return this.http.put(`${this.baseUrl}/${id}`, courseData);
  }
}


<a [routerLink]="['/courses/update', course.id]">Edit</a>


canEditCourse(course: any): boolean {
  return this.isLoggedIn && this.userRole === 'teacher' && course.creatorId === this.userId;
}


<a *ngIf="canEditCourse(course)" [routerLink]="['/courses/update', course.id]">Edit</a>
